plugins {
    id 'java'
    id 'application'
}

java {
	sourceCompatibility = JavaVersion.toVersion(11)
	targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
	mavenCentral()
}

mainClassName = 'edu.odu.cs.cs350.pne.Department'

application {
    mainClass = 'edu.odu.cs.cs350.pne.Department'
}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	testImplementation 'org.hamcrest:hamcrest-library:2.2'
    implementation 'com.opencsv:opencsv:5.5.2'
    implementation 'org.apache.poi:poi:5.2.3'

}

test {
	ignoreFailures = true
	useJUnitPlatform()
}



//post data to branch to create website
task copyDocs(dependsOn: 'javadoc') {
    doLast {
        copy {
            from 'build/docs/'
            into 'build/reports/'
        }
    }
}

task reports(dependsOn: ['javadoc','test', 'copyDocs']) {
    doLast {
        copy {
            from 'src/main/html/'
            into 'build/reports/'
        }
    }
}


task gstatus2 () {
    doLast {
        println "Check out repository status"
        exec {
            workingDir = '.'
            commandLine = ['git', 'status']
        }
    }
}

def pagesDir = file("${project.rootDir}/../website-temp").absolutePath

task clearPages(type: Delete) {
    delete pagesDir
}

task workTree(dependsOn: 'clearPages') { 
    doLast {
        exec {
            workingDir = '.'
            commandLine = ['git', 'worktree', 'add', '-f', pagesDir, 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'checkout', 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'pull']
        }
    }
}

task copyReports (type: Copy, dependsOn: ['reports', 'workTree', 'copyDocs']) {
    from 'build/reports'
    into pagesDir
}


task copyWebsite (dependsOn: ['copyReports']) {
}

task commitWebsite (dependsOn: 'copyWebsite') {
    doLast {
        Date now = new Date()

        exec {
            workingDir = pagesDir
            commandLine = ['git', 'add', pagesDir]
            ignoreExitValue = true
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'commit', '-m', 'Updating webpages at ' + now.toString()]
            ignoreExitValue = true
        }
    }
}

task pushWebsite (type: Exec, dependsOn: 'commitWebsite') {
    workingDir = pagesDir
    commandLine = ['git', 'push']
    ignoreExitValue = true
}

task deployReports (type: Delete, dependsOn: 'pushWebsite') {
    group = "Reporting"
    description  'Commit and push website changes to GitHub'
    delete pagesDir
}

check.dependsOn copyDocs
